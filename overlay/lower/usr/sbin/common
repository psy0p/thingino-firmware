#!/bin/sh

ENV_DUMP_FILE="/tmp/environment"
[ -f "$ENV_DUMP_FILE" ] && . "$ENV_DUMP_FILE"

[ "$0" = "-sh" ] && echo "Do not run directly!" && exit 1

PID=$$
LOCK_FILE="/run/process-$PID.pid"
LOG_FILE="/tmp/webui.log"
LOG_SIZE_LIMIT=50000

CURL="curl --show-error --fail --connect-timeout 10 --max-time 30 --retry 3"

SNAPSHOT_FILE="/tmp/snapshot.jpg"
VBUFFER_FILE="/tmp/vbuffer.mov"

build_cmd() {
	command="$command $1"
}

die() {
	log "$1"
	quit_clean ${2:-1}
}

is_debug_mode() {
	[ $((0 + debug)) -gt 0 ] || [ "true" = "$debug" ]
}

tag() {
	echo "$(ts) [$PID:$plugin]"
}

ts() {
	date +"%F %T"
}

log() {
	# poor man's logrotate
	if [ -f $LOG_FILE ] && [ "$(stat -c%s $LOG_FILE)" -gt $LOG_SIZE_LIMIT ]; then
		# redundant, but calling log() from within log() is wrong!
		echo "$(tag) Rotate log file" >> $LOG_FILE
		mv "$LOG_FILE" "${LOG_FILE}.1"
		echo "$(tag) Log file rotated." >> $LOG_FILE
	fi
	echo -e "$(tag) $1" >> $LOG_FILE
	echo -e "$1" >&2
}

quit_clean() {
	if [ -f $LOCK_FILE ]; then
		log "Remove lock file $LOCK_FILE"
		rm $LOCK_FILE
	fi
	exit $1
}

run() {
	echo "$(eval "$1" >> $LOG_FILE 2>&1)"
}

singleton() {
	log "Check lock file $LOCK_FILE"
	if [ -f "$LOCK_FILE" ] && ps | grep "^\s*\b$(cat "$LOCK_FILE")\b" > /dev/null; then
		log "Another instance running with PID $(cat $LOCK_FILE)."
		exit 1
	fi
	pids=$(pidof $plugin)
	if [ -n "$pids" ] && [ "$$" != "$pids" ]; then
		log "Another instances found with PIDs $pids."
		exit 1
	fi
	printf "%d\n" $PID > $LOCK_FILE
	log "Create lock file $LOCK_FILE"
}

# "target"
clone_snapshot() {
	[ -f "$SNAPSHOT_FILE" ] || die "Cannot find a snapshot"
	delete_tempfile="true"
	create_directory_for "$1"
	cp "$SNAPSHOT_FILE" "$1"
}

# "filename"
create_directory_for() {
	dir="$(dirname "$1")"
	[ -d "$dir" ] || mkdir -p "$dir"
	[ -d "$dir" ] || die "Cannot create directory $dir"
	[ -w "$dir" ] || die "Cannot write to $dir"
}

# "message"
hesitate() {
	log "$1"
	sleep 5
	exit 0
}

# "template"
parse_target() {
	echo "$1" | sed "s/%hostname/$(hostname -s)/g"
}

if [ -n "$plugin" ]; then
	CONFIG_FILE="/etc/webui/$plugin.conf"
	[ -f "$CONFIG_FILE" ] && . $CONFIG_FILE
fi
